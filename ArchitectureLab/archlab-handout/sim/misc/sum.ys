# B4night
# 1/18/2023
    .pos 0
    irmovq stack, %rsp      # initialize stack
    call main
    halt


# Sample linked list 
    .align 8 
ele1:
    .quad 0x001    # val
    .quad ele2      # next
ele2:
    .quad 0x010 
    .quad ele3
ele3:
    .quad 0x100 
    .quad 0


main:
    irmovq ele1, %rdi   # transfer argument
    call sum_list
    ret

sum_list:
    xorq %rax, %rax     # now R[rax] = 0
    irmovq $8, %r8      # offset, 8 Bytes
    andq %rdi, %rdi     # set CC
    jmp test
loop:
    mrmovq (%rdi), %r9  # move val to r9
    addq %r9, %rax      # rax += val
    addq %r8, %rdi      # now rdi stores the value of next
    mrmovq (%rdi), %rdi # rdi = (rdi), means that list = list->next;
    andq %rdi, %rdi     # set CC
test:
    jne loop
    ret


    .pos 0x500
stack:
