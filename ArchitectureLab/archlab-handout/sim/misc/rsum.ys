# B4night
# 1/18/2023
    .pos 0
    irmovq stack, %rsp      # initialize stack
    call main
    halt


# Sample linked list 
    .align 8 
ele1:
    .quad 0x00a    # val
    .quad ele2      # next
ele2:
    .quad 0x0b0 
    .quad ele3
ele3:
    .quad 0xc00 
    .quad 0


main:
    irmovq ele1, %rdi   # transfer argument
    call rsum_list
    ret

rsum_list:
    pushq %rbx          # rbx为被调用者保存寄存器
    xorq %rax, %rax     # 赋值0
    andq %rdi, %rdi     # set CC
    je return           

    irmovq $8, %r8
    mrmovq (%rdi), %rbx # 保存val
    addq %r8, %rdi
    mrmovq (%rdi), %rdi # rdi现在指向下一个结点
    call rsum_list      # 递归调用
    addq %rbx, %rax     # 将递归调用的结果和rbx相加
return:
    popq %rbx           # 恢复被调用者保存寄存器的值
    ret

    .pos 0x500
stack:
