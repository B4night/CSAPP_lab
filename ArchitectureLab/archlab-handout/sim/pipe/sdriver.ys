#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# B4night
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
	irmovq $3, %r8
	irmovq $1, %r13	# 用于loop1的subq
	irmovq $4, %r14	# 用于loop4的subq
	pushq %rdx
	subq %r8, %rdx	# set CC
	popq %rdx
	jle	loop1		# len <= 3

loop4:
	mrmovq (%rdi), %r9
	iaddq $8, %rdi
	mrmovq (%rdi), %r10
	iaddq $8, %rdi
	mrmovq (%rdi), %r11
	iaddq $8, %rdi
	mrmovq (%rdi), %r12
	iaddq $8, %rdi
	rmmovq %r9, (%rsi)
	iaddq $8, %rsi
	rmmovq %r10, (%rsi)
	iaddq $8, %rsi
	rmmovq %r11, (%rsi)
	iaddq $8, %rsi
	rmmovq %r12, (%rsi)
	iaddq $8, %rsi
	
	andq %r9, %r9
	jle loop4_no_count_val1		# <= 0
	iaddq $1, %rax
loop4_no_count_val1:
	andq %r10, %r10
	jle loop4_no_count_val2
	iaddq $1, %rax
loop4_no_count_val2:
	andq %r11, %r11
	jle loop4_no_count_val3
	iaddq $1, %rax
loop4_no_count_val3:
	andq %r12, %r12
	jle loop4_no_count_val4
	iaddq $1, %rax
loop4_no_count_val4:
	subq %r14, %rdx			# len <= 4
	pushq %rdx				# 比较len和3的大小
	subq %r8, %rdx
	popq %rdx
	jle loop1_end	# len<=3,转到loop1执行
	jmp loop4

loop1:
	mrmovq (%rdi), %r9
	iaddq $8, %rdi
	rmmovq %r9, (%rsi)
	iaddq $8, %rsi
	andq %r9, %r9
	jle loop1_no_count
	iaddq $1, %rax
loop1_no_count:
	subq %r13, %rdx
loop1_end:
	andq %rdx, %rdx
	jg loop1

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad -3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
